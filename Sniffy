from threading import Thread
from models.functionhost import Ping_Reseau
from models.functionhost import gethostname
import queue
import os
import shutil

octet1 = int(input("Choisir le 1er octet :"))
octet2 = int(input("Choisir le 2ieme octet :"))
octet3 = int(input("Choisir le 3ieme octet :"))
octet4 = int(input("Dernière ip à tester :"))

Ping_Reseau(octet1, octet2, octet3, octet4)

""" Programme principal """
""" Création de l'objet Queue """
q = queue.Queue()
""" Tableau qui stockera les threads créés """
threads = []

""" dictionnaire stockant les noms d'hôte récupérés """
hostnames = {}

""" On défini la plage d'adresse IP à scruter """
for ping in range(1, octet4 + 1):
    """ Variable permettant de stocké l'adresse IP courante à scruter """
    address = str(octet1) + "." + str(octet2) + "." + str(octet3) + "." + str(ping)
    """ Création du thread avec appel de la fonction gethostname pour traitement de l'adresse IP """
    t = Thread(target=gethostname, args=(address, q, hostnames))

    """ On ajoute chaque thread dans le tableau """
    threads.append(t)

""" On démarre tous les threads créés """
for t in threads:
    t.start()
""" On unit tous les threads pour être sûr que tous ceux-ci renvoient leur valeur """
for t in threads:
    t.join()
""" On récupère les valeurs stockées dans la queue de threads et on les stocke dans le dictionnaire """
hostnames = q.get()
""" On itère chaque paire de clé/valeur à la recherche des noms d'hôte """
for address, hostname in hostnames.items():
    if (hostname != None):
        print(address, '=>', hostname)
        filehostname = open("hostname.txt", "a+")
        filehostname.write(address + " " + "=>" + " " + hostname + "\n")
filehostname.close()
shutil.copy("hostname.txt", "hostfound.txt")
os.remove("hostname.txt")
